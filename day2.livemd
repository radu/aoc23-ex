# Advent of Code - Day 02

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Introduction

--> Content

## Puzzle

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIyIiwic2Vzc2lvbl9zZWNyZXQiOiJBT0NfU0VTU0lPTiIsInllYXIiOiIyMDIzIn0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Round do
  defstruct red: 0, green: 0, blue: 0

  def parse(rd) when is_binary(rd) do
    rd
    |> String.split(", ")
    |> Enum.map(fn pair ->
      pair
      |> String.split(" ")
      |> then(fn [num, color] ->
        {String.to_existing_atom(color), String.to_integer(num)}
      end)
    end)
    |> Enum.into(%{})
    |> then(fn x -> struct(__MODULE__, x) end)
  end

  def possible?(rd, max_pieces) do
    rd
    |> Map.from_struct()
    |> Enum.all?(fn {color, cnt} -> cnt <= Map.from_struct(max_pieces)[color] end)
  end
end

defmodule Game do
  defstruct [:id, :rounds]

  def parse(game) when is_binary(game) do
    Regex.named_captures(~r/^Game (?<id_text>\d*): (?<rounds_text>.*)$/, game)
    |> then(fn %{"id_text" => id_text, "rounds_text" => rounds_text} ->
      %{
        id: String.to_integer(id_text),
        rounds:
          String.split(rounds_text, "; ")
          |> Enum.map(fn rd -> Round.parse(rd) end)
      }
    end)
  end

  def possible?(game, max_pieces) do
    game.rounds
    |> Enum.all?(fn rd ->
      Round.possible?(rd, max_pieces)
    end)
  end

  def power(game) do
    game.rounds
    |> Enum.reduce(%Round{}, fn rd, acc ->
      for color <- [:red, :green, :blue] do
        {color,
         max(
           Map.from_struct(acc)[color],
           Map.from_struct(rd)[color]
         )}
      end
      |> then(fn x -> struct(Round, x) end)
    end)
    |> then(fn rd -> rd.red * rd.green * rd.blue end)
  end
end

defmodule Parser do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line -> Game.parse(line) end)
  end
end
```

```elixir
expected =
  """
  Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
  Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
  Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
  Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
  Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
  """
  |> Parser.parse()
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
  Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
  Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
  Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
  Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
  """

  @expected expected

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

```elixir
Parser.parse(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  @max_pieces %Round{red: 12, green: 13, blue: 14}

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.map(fn game ->
      {game.id, Game.possible?(game, @max_pieces)}
    end)
    |> Enum.map_reduce(0, fn {id, valid}, acc ->
      if valid do
        {id, acc + id}
      else
        {false, acc}
      end
    end)
  end
end
```

```elixir
max_pieces = %{red: 12, green: 13, blue: 14}

[green: 8, blue: 6, red: 20]
|> Enum.map(fn {color, cnt} ->
  cnt <= max_pieces[color]
end)
```

```elixir
max_pieces = %{red: 12, green: 13, blue: 14}

"""
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""
|> PartOne.run()
|> dbg()
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
  Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
  Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
  Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
  Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
  Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
  """

  @expected {[1, 2, false, false, 5], 8}

  test "part one" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.run(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.map(fn game ->
      Game.power(game)
    end)
    |> Enum.sum()
  end
end
```

### Tests - Part 2

```elixir
"""
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""
|> Parser.parse()
|> List.first()
|> then(fn x ->
  x.rounds
end)
|> Enum.reduce(%Round{}, fn rd, acc ->
  for color <- [:red, :green, :blue] do
    {color,
     max(
       Map.from_struct(acc)[color],
       Map.from_struct(rd)[color]
     )}
  end
  |> then(fn x -> struct(Round, x) end)
end)
|> then(fn rd -> rd.red * rd.green * rd.blue end)
```

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
  Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
  Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
  Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
  Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
  """

  @expected 2286

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":6709,"stamp":{"token":"XCP.CHs7Osu_mMzR9eUug1Glt7lJ1nS-nDCGBfPQenp824MtLtImRhSwu6ejr-4MKTS5Y9CQ_sN2tiJKOgxlIFVbGsnhDU4WqoLbUgVfxqn64BA4hXHevtI","version":2}} -->
